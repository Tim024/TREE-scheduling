/*
 * This file is part of HiKoB Openlab.
 *
 * HiKoB Openlab is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, version 3.
 *
 * HiKoB Openlab is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with HiKoB Openlab. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Copyright (C) 2011,2012 HiKoB.
 */

/*
 * rf2xx_regs.h
 *
 *  Created on: Aug 20, 2011
 *      Author: Cl√©ment Burin des Roziers <clement.burin-des-roziers.at.hikob.com>
 */

#ifndef RF2XX_REGS_H_
#define RF2XX_REGS_H_

enum rf2xx_access
{
    RF2XX_ACCESS_REG = 0x80,
    RF2XX_ACCESS_FRAMEBUFFER = 0x20,
    RF2XX_ACCESS_SRAM = 0x00,

    RF2XX_ACCESS_READ = 0x00,
    RF2XX_ACCESS_WRITE = 0x40,
};

enum rf2xx_register
{
    RF2XX_REG__TRX_STATUS = 0x01,
    RF2XX_REG__TRX_STATE = 0x02,
    RF2XX_REG__TRX_CTRL_0 = 0x03,
    RF2XX_REG__TRX_CTRL_1 = 0x04,
    RF2XX_REG__PHY_TX_PWR = 0x05,
    RF2XX_REG__PHY_RSSI = 0x06,
    RF2XX_REG__PHY_ED_LEVEL = 0x07,
    RF2XX_REG__PHY_CC_CCA = 0x08,
    RF2XX_REG__CCA_THRES = 0x09,
    RF2XX_REG__RX_CTRL = 0x0A,
    RF2XX_REG__SFD_VALUE = 0x0B,
    RF2XX_REG__TRX_CTRL_2 = 0x0C,
    RF2XX_REG__ANT_DIV = 0x0D,
    RF2XX_REG__IRQ_MASK = 0x0E,
    RF2XX_REG__IRQ_STATUS = 0x0F,
    RF2XX_REG__VREG_CTRL = 0x10,
    RF2XX_REG__BATMON = 0x11,
    RF2XX_REG__XOSC_CTRL = 0x12,

    RF2XX_REG__CC_CTRL_0 = 0x13,
    RF2XX_REG__CC_CTRL_1 = 0x14,


    RF2XX_REG__RX_SYN = 0x15,

    RF2XX_REG__XAH_CTRL_1 = 0x17,
    RF2XX_REG__FTN_CTRL = 0x18,

    RF2XX_REG__PLL_CF = 0x1A,
    RF2XX_REG__PLL_DCU = 0x1B,
    RF2XX_REG__PART_NUM = 0x1C,
    RF2XX_REG__VERSION_NUM = 0x1D,
    RF2XX_REG__MAN_ID_0 = 0x1E,
    RF2XX_REG__MAN_ID_1 = 0x1F,
    RF2XX_REG__SHORT_ADDR_0 = 0x20,
    RF2XX_REG__SHORT_ADDR_1 = 0x21,
    RF2XX_REG__PAN_ID_0 = 0x22,
    RF2XX_REG__PAN_ID_1 = 0x23,

    RF2XX_REG__IEEE_ADDR_0 = 0x24,
    RF2XX_REG__IEEE_ADDR_1 = 0x25,
    RF2XX_REG__IEEE_ADDR_2 = 0x26,
    RF2XX_REG__IEEE_ADDR_3 = 0x27,
    RF2XX_REG__IEEE_ADDR_4 = 0x28,
    RF2XX_REG__IEEE_ADDR_5 = 0x29,
    RF2XX_REG__IEEE_ADDR_6 = 0x2A,
    RF2XX_REG__IEEE_ADDR_7 = 0x2B,

    RF2XX_REG__XAH_CTRL_0 = 0x2C,
    RF2XX_REG__CSMA_SEED_0 = 0x2D,
    RF2XX_REG__CSMA_SEED_1 = 0x2E,
    RF2XX_REG__CSMA_BE = 0x2F,


    RF2XX_REG__TST_CTRL_DIGI = 0x36,
};

enum
{
    RF2XX_TRX_CTRL_0_MASK__PAD_IO = 0xC0,
    RF2XX_TRX_CTRL_0_MASK__PAD_IO_CLKM = 0x30,
    RF2XX_TRX_CTRL_0_MASK__CLKM_SHA_SEL = 0x08,
    RF2XX_TRX_CTRL_0_MASK__CLKM_CTRL = 0x07,

    RF2XX_TRX_CTRL_0_DEFAULT__PAD_IO = 0x00,
    RF2XX_TRX_CTRL_0_DEFAULT__PAD_IO_CLKM = 0x10,
    RF2XX_TRX_CTRL_0_DEFAULT__CLKM_SHA_SEL = 0x08,
    RF2XX_TRX_CTRL_0_DEFAULT__CLKM_CTRL = 0x01,

    RF2XX_TRX_CTRL_0_CLKM_CTRL__OFF = 0x00,
    RF2XX_TRX_CTRL_0_CLKM_CTRL__1MHz = 0x01,
    RF2XX_TRX_CTRL_0_CLKM_CTRL__2MHz = 0x02,
    RF2XX_TRX_CTRL_0_CLKM_CTRL__4MHz = 0x03,
    RF2XX_TRX_CTRL_0_CLKM_CTRL__8MHz = 0x04,
    RF2XX_TRX_CTRL_0_CLKM_CTRL__16MHz = 0x05,
    RF2XX_TRX_CTRL_0_CLKM_CTRL__250kHz = 0x06,
    RF2XX_TRX_CTRL_0_CLKM_CTRL__62_5kHz = 0x07,
};

enum
{
    RF2XX_TRX_CTRL_1_MASK__PA_EXT_EN = 0x80,
    RF2XX_TRX_CTRL_1_MASK__IRQ_2_EXT_EN = 0x40,
    RF2XX_TRX_CTRL_1_MASK__TX_AUTO_CRC_ON = 0x20,
    RF2XX_TRX_CTRL_1_MASK__RX_BL_CTRL = 0x10,
    RF2XX_TRX_CTRL_1_MASK__SPI_CMD_MODE = 0x0C,
    RF2XX_TRX_CTRL_1_MASK__IRQ_MASK_MODE = 0x02,
    RF2XX_TRX_CTRL_1_MASK__IRQ_POLARITY = 0x01,
};

enum
{
    RF2XX_TRX_CTRL_2_MASK__RX_SAFE_MODE = 0x80,
    RF2XX_TRX_CTRL_2_MASK__OQPSK_DATA_RATE = 0x03,

    RF2XX_TRX_CTRL_2_OQPSK_DATA_RATE__100_250 = 0x00,
    RF2XX_TRX_CTRL_2_OQPSK_DATA_RATE__200_500 = 0x01,
    RF2XX_TRX_CTRL_2_OQPSK_DATA_RATE__400_1000 = 0x02,
    RF2XX_TRX_CTRL_2_OQPSK_DATA_RATE___2000 = 0x03,

    /* RF212 only */
    RF2XX_TRX_CTRL_2_MASK__SUBMODE = 0x04,
    RF2XX_TRX_CTRL_2_MASK__BPSK_OQPSK = 0x08,
    RF2XX_TRX_CTRL_2_MASK__OQPSK_SUB1_RC_EN = 0x10,
    RF2XX_TRX_CTRL_2_MASK__OQPSK_SCRAM_EN = 0x20,
    RF2XX_TRX_CTRL_2_MASK__TRX_OFF_AVDD_EN  = 0x40,
};

enum
{
    RF2XX_IRQ_STATUS_MASK__BAT_LOW = 0x80,
    RF2XX_IRQ_STATUS_MASK__TRX_UR = 0x40,
    RF2XX_IRQ_STATUS_MASK__AMI = 0x20,
    RF2XX_IRQ_STATUS_MASK__CCA_ED_DONE = 0x10,
    RF2XX_IRQ_STATUS_MASK__TRX_END = 0x08,
    RF2XX_IRQ_STATUS_MASK__RX_START = 0x04,
    RF2XX_IRQ_STATUS_MASK__PLL_UNLOCK = 0x02,
    RF2XX_IRQ_STATUS_MASK__PLL_LOCK = 0x01,
};

enum rf2xx_xah_ctrl_1
{
  RF2XX_XAH_CTRL_1_AACK_FLTR_RES_FT = 0x32,
  RF2XX_XAH_CTRL_1_AACK_UPLD_RES_FT = 0x16,
  RF2XX_XAH_CTRL_1_AACK_ACK_TIME = 0x4,
  RF2XX_XAH_CTRL_1_AACK_PROM_MODE = 0x2,
};

enum rf2xx_trx_status
{
    RF2XX_TRX_STATUS_MASK__CCA_DONE = 0x80,
    RF2XX_TRX_STATUS_MASK__CCA_STATUS = 0x40,
    RF2XX_TRX_STATUS_MASK__TRX_STATUS = 0x1F,

    RF2XX_TRX_STATUS__P_ON = 0x00,
    RF2XX_TRX_STATUS__BUSY_RX = 0x01,
    RF2XX_TRX_STATUS__BUSY_TX = 0x02,
    RF2XX_TRX_STATUS__RX_ON = 0x06,
    RF2XX_TRX_STATUS__TRX_OFF = 0x08,
    RF2XX_TRX_STATUS__PLL_ON = 0x09,
    RF2XX_TRX_STATUS__SLEEP = 0x0F,
    RF2XX_TRX_STATUS__BUSY_RX_AACK = 0x11,
    RF2XX_TRX_STATUS__BUSY_TX_ARET = 0x12,
    RF2XX_TRX_STATUS__RX_AACK_ON = 0x16,
    RF2XX_TRX_STATUS__TX_ARET_ON = 0x19,
    RF2XX_TRX_STATUS__RX_ON_NOCLK = 0x1C,
    RF2XX_TRX_STATUS__RX_AACK_ON_NOCLK = 0x1D,
    RF2XX_TRX_STATUS__BUSY_RX_AACK_NOCLK = 0x1E,
    RF2XX_TRX_STATUS__STATE_TRANSITION_IN_PROGRESS = 0x1F,
};

enum rf2xx_trx_state
{
    RF2XX_TRX_STATE__NOP = 0x00,
    RF2XX_TRX_STATE__TX_START = 0x02,
    RF2XX_TRX_STATE__FORCE_TRX_OFF = 0x03,
    RF2XX_TRX_STATE__FORCE_PLL_ON = 0x04,
    RF2XX_TRX_STATE__RX_ON = 0x06,
    RF2XX_TRX_STATE__TRX_OFF = 0x08,
    RF2XX_TRX_STATE__PLL_ON = 0x09,
    RF2XX_TRX_STATE__RX_AACK_ON = 0x16,
    RF2XX_TRX_STATE__TX_ARET_ON = 0x19,
};

enum rf2xx_phy_cc_cca
{
    RF2XX_PHY_CC_CCA_MASK__CCA_REQUEST = 0x80,
    RF2XX_PHY_CC_CCA_MASK__CCA_MODE = 0x60,
    RF2XX_PHY_CC_CCA_MASK__CHANNEL = 0x1F,

    RF2XX_PHY_CC_CCA_DEFAULT__CCA_MODE = 0x20,
};

enum rf2xx_phy_tx_pwr
{
    RF2XX_PHY_TX_PWR_MASK__PA_BUF_LT = 0xC0,
    RF2XX_PHY_TX_PWR_MASK__PA_LT = 0x30,
    RF2XX_PHY_TX_PWR_MASK__TX_PWR = 0x0F,

    RF2XX_PHY_TX_PWR_DEFAULT__PA_BUF_LT = 0xC0,
    RF2XX_PHY_TX_PWR_DEFAULT__PA_LT = 0x00,
    RF2XX_PHY_TX_PWR_DEFAULT__TX_PWR = 0x00,

    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__3dBm = 0x00,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__2_8dBm = 0x01,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__2_3dBm = 0x02,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__1_8dBm = 0x03,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__1_3dBm = 0x04,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__0_7dBm = 0x05,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__0dBm = 0x06,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m1dBm = 0x07,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m2dBm = 0x08,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m3dBm = 0x09,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m4dBm = 0x0A,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m5dBm = 0x0B,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m7dBm = 0x0C,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m9dBm = 0x0D,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m12dBm = 0x0E,
    RF2XX_PHY_TX_PWR_TX_PWR_VALUE__m17dBm = 0x0F,

};

enum rf2xx_phy_rx_threshold
{
    RF2XX_PHY_RX_THRESHOLD__m101dBm = 0x0,
    RF2XX_PHY_RX_THRESHOLD__m90dBm  = 0x1,
    RF2XX_PHY_RX_THRESHOLD__m87dBm  = 0x2,
    RF2XX_PHY_RX_THRESHOLD__m84dBm  = 0x3,
    RF2XX_PHY_RX_THRESHOLD__m81dBm  = 0x4,
    RF2XX_PHY_RX_THRESHOLD__m78dBm  = 0x5,
    RF2XX_PHY_RX_THRESHOLD__m75dBm  = 0x6,
    RF2XX_PHY_RX_THRESHOLD__m72dBm  = 0x7,
    RF2XX_PHY_RX_THRESHOLD__m69dBm  = 0x8,
    RF2XX_PHY_RX_THRESHOLD__m66dBm  = 0x9,
    RF2XX_PHY_RX_THRESHOLD__m63dBm  = 0xa,
    RF2XX_PHY_RX_THRESHOLD__m60dBm  = 0xb,
    RF2XX_PHY_RX_THRESHOLD__m57dBm  = 0xc,
    RF2XX_PHY_RX_THRESHOLD__m54dBm  = 0xd,
    RF2XX_PHY_RX_THRESHOLD__m51dBm  = 0xe,
    RF2XX_PHY_RX_THRESHOLD__m48dBm  = 0xf,
};

enum rf2xx_phy_rssi
{
    RF2XX_PHY_RSSI_MASK__RX_CRC_VALID = 0x80,
    RF2XX_PHY_RSSI_MASK__RND_VALUE = 0x60,
    RF2XX_PHY_RSSI_MASK__RSSI = 0x1F,
};

enum rf2xx_xosc_ctrl
{
    RF2XX_XOSC_CTRL__XTAL_MODE_CRYSTAL = 0xF0,
    RF2XX_XOSC_CTRL__XTAL_MODE_EXTERNAL = 0xF0,
};

#endif /* RF2XX_REGS_H_ */
